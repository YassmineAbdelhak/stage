{"ast":null,"code":"import { getAllProductsReducer, getProductByIdReducer, addProductReviewReducer, deleteProductReducer, addProductReducer, updateProductReducer } from \"../reducers/productReducer\";\nimport { cartReducer } from \"../reducers/cartReducer\";\nimport { registerNewUserReducer, loginReducer, getAllUsersReducer, deleteUserReducer } from \"../reducers/userReducer\";\nimport { getOrdersByUserIdReducer, placeOrderReducer, getAllOrdersReducer } from \"../reducers/orderReducer\";\nimport { combineReducers } from 'redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nconst finalReducer = combineReducers({\n  getAllProductsReducer: getAllProductsReducer,\n  getProductByIdReducer: getProductByIdReducer,\n  //cartReducer : cartReducer,\n  //registerNewUserReducer : registerNewUserReducer,\n  //loginReducer : loginReducer,\n  //placeOrderReducer : placeOrderReducer,\n  //getOrdersByUserIdReducer : getOrdersByUserIdReducer,\n  //addProductReviewReducer : addProductReviewReducer,\n  //getAllUsersReducer : getAllUsersReducer,\n  //deleteUserReducer : deleteUserReducer,\n  deleteProductReducer: deleteProductReducer,\n  addProductReducer: addProductReducer,\n  updateProductReducer: updateProductReducer //getAllOrdersReducer : getAllOrdersReducer\n\n}); //const cartItems = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : []\n//const currentUser = localStorage.getItem('currentUser') ? JSON.parse(localStorage.getItem('currentUser')) : null\n\n{\n  /*const initialState = {\r\n   cartReducer: {cartItems : cartItems},\r\n   loginReducer : { currentUser : currentUser} \r\n  }*/\n}\nconst composeEnhancers = composeWithDevTools({// Specify here name, actionsBlacklist, actionsCreators and other options\n});\nconst store = createStore(finalReducer, initialState, composeEnhancers(applyMiddleware(thunk) // other store enhancers if any\n));\nexport default store;","map":{"version":3,"sources":["C:/flask/New folder/my-app/client/src/store/store.js"],"names":["getAllProductsReducer","getProductByIdReducer","addProductReviewReducer","deleteProductReducer","addProductReducer","updateProductReducer","cartReducer","registerNewUserReducer","loginReducer","getAllUsersReducer","deleteUserReducer","getOrdersByUserIdReducer","placeOrderReducer","getAllOrdersReducer","combineReducers","createStore","applyMiddleware","composeWithDevTools","thunk","finalReducer","composeEnhancers","store","initialState"],"mappings":"AAAA,SAASA,qBAAT,EAAgCC,qBAAhC,EAAuDC,uBAAvD,EAAgFC,oBAAhF,EAAsGC,iBAAtG,EAAyHC,oBAAzH,QAAqJ,4BAArJ;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,sBAAT,EAAiCC,YAAjC,EAA+CC,kBAA/C,EAAmEC,iBAAnE,QAA4F,yBAA5F;AACA,SAASC,wBAAT,EAAmCC,iBAAnC,EAAsDC,mBAAtD,QAAiF,0BAAjF;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,MAAMC,YAAY,GAAGL,eAAe,CAAC;AACnCd,EAAAA,qBAAqB,EAAEA,qBADY;AAEnCC,EAAAA,qBAAqB,EAAEA,qBAFY;AAGnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAE,EAAAA,oBAAoB,EAAGA,oBAXY;AAYnCC,EAAAA,iBAAiB,EAAGA,iBAZe;AAanCC,EAAAA,oBAAoB,EAAGA,oBAbY,CAcnC;;AAdmC,CAAD,CAApC,C,CAiBA;AACA;;AAGA;AAAC;AACD;AACA;AACA;AAAI;AAEJ,MAAMe,gBAAgB,GAAGH,mBAAmB,CAAC,CAC3C;AAD2C,CAAD,CAA5C;AAGA,MAAMI,KAAK,GAAGN,WAAW,CAACI,YAAD,EAAeG,YAAf,EAA8BF,gBAAgB,CACrEJ,eAAe,CAACE,KAAD,CADsD,CAErE;AAFqE,CAA9C,CAAzB;AAKA,eAAeG,KAAf","sourcesContent":["import { getAllProductsReducer, getProductByIdReducer, addProductReviewReducer, deleteProductReducer, addProductReducer, updateProductReducer } from \"../reducers/productReducer\";\r\nimport { cartReducer } from \"../reducers/cartReducer\"\r\nimport { registerNewUserReducer, loginReducer, getAllUsersReducer, deleteUserReducer } from \"../reducers/userReducer\";\r\nimport { getOrdersByUserIdReducer, placeOrderReducer, getAllOrdersReducer } from \"../reducers/orderReducer\"\r\nimport { combineReducers } from 'redux'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk'\r\n\r\nconst finalReducer = combineReducers({\r\n  getAllProductsReducer: getAllProductsReducer,\r\n  getProductByIdReducer: getProductByIdReducer,\r\n  //cartReducer : cartReducer,\r\n  //registerNewUserReducer : registerNewUserReducer,\r\n  //loginReducer : loginReducer,\r\n  //placeOrderReducer : placeOrderReducer,\r\n  //getOrdersByUserIdReducer : getOrdersByUserIdReducer,\r\n  //addProductReviewReducer : addProductReviewReducer,\r\n  //getAllUsersReducer : getAllUsersReducer,\r\n  //deleteUserReducer : deleteUserReducer,\r\n  deleteProductReducer : deleteProductReducer,\r\n  addProductReducer : addProductReducer,\r\n  updateProductReducer : updateProductReducer,\r\n  //getAllOrdersReducer : getAllOrdersReducer\r\n})\r\n\r\n//const cartItems = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : []\r\n//const currentUser = localStorage.getItem('currentUser') ? JSON.parse(localStorage.getItem('currentUser')) : null\r\n\r\n\r\n{/*const initialState = {\r\n  cartReducer: {cartItems : cartItems},\r\n  loginReducer : { currentUser : currentUser} \r\n}*/}\r\n\r\nconst composeEnhancers = composeWithDevTools({\r\n  // Specify here name, actionsBlacklist, actionsCreators and other options\r\n});\r\nconst store = createStore(finalReducer, initialState,  composeEnhancers(\r\n  applyMiddleware(thunk)\r\n  // other store enhancers if any\r\n))\r\n\r\nexport default store;"]},"metadata":{},"sourceType":"module"}